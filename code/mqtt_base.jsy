export const mqtt_protocol = @{}
  ... _mqtt_init_msg_types()
  ... _mqtt_init_properties()


function _mqtt_init_msg_types() ::
  const type_entries = @[]
    @{} cmd: 0x00, type: 'reserved'
    @{} cmd: 0x10, type: 'connect'
    @{} cmd: 0x20, type: 'connack'
    @{} cmd: 0x30, type: 'publish'
    @{} cmd: 0x40, type: 'puback'
    @{} cmd: 0x50, type: 'pubrec'
    @{} cmd: 0x60, type: 'pubrel'
    @{} cmd: 0x70, type: 'pubcomp'
    @{} cmd: 0x80, type: 'subscribe'
    @{} cmd: 0x90, type: 'suback'
    @{} cmd: 0xa0, type: 'unsubscribe'
    @{} cmd: 0xb0, type: 'unsuback'
    @{} cmd: 0xc0, type: 'pingreq'
    @{} cmd: 0xd0, type: 'pingresp'
    @{} cmd: 0xe0, type: 'disconnect'
    @{} cmd: 0xf0, type: 'auth'

  const type_map = new Map()
  for const type_obj of type_entries ::
    type_obj.id = type_obj.cmd >>> 4 
    type_map.set(type_obj.cmd, type_obj)

  return @{}
    type_entries
    by_type: type_map.get.bind(type_map)


function _mqtt_init_properties() ::
  const prop_entries = @[]
    @{} id: 0x01, type: 'u8',   name: 'payload_format_indicator'
    @{} id: 0x02, type: 'u32',  name: 'message_expiry_interval', 
    @{} id: 0x03, type: 'utf8', name: 'content_type', 
    @{} id: 0x08, type: 'utf8', name: 'response_topic', 
    @{} id: 0x09, type: 'bin',  name: 'correlation_data', 
    @{} id: 0x0B, type: 'vint', name: 'subscription_identifier', 
    @{} id: 0x11, type: 'u32',  name: 'session_expiry_interval', 
    @{} id: 0x12, type: 'utf8', name: 'assigned_client_identifier', 
    @{} id: 0x13, type: 'u16',  name: 'server_keep_alive', 
    @{} id: 0x15, type: 'utf8', name: 'authentication_method', 
    @{} id: 0x16, type: 'bin',  name: 'authentication_data', 
    @{} id: 0x17, type: 'u8',   name: 'request_problem_information', 
    @{} id: 0x18, type: 'u32',  name: 'will_delay_interval', 
    @{} id: 0x19, type: 'u8',   name: 'request_response_information', 
    @{} id: 0x1A, type: 'utf8', name: 'response_information', 
    @{} id: 0x1C, type: 'utf8', name: 'server_reference', 
    @{} id: 0x1F, type: 'utf8', name: 'reason_string', 
    @{} id: 0x21, type: 'u16',  name: 'receive_maximum', 
    @{} id: 0x22, type: 'u16',  name: 'topic_alias_maximum', 
    @{} id: 0x23, type: 'u16',  name: 'topic_alias', 
    @{} id: 0x24, type: 'u8',   name: 'maximum_qo_s', 
    @{} id: 0x25, type: 'u8',   name: 'retain_available', 
    @{} id: 0x26, type: 'pair', name: 'user_properties', plural: true
    @{} id: 0x27, type: 'u32',  name: 'maximum_packet_size', 
    @{} id: 0x28, type: 'u8',   name: 'wildcard_subscription_available', 
    @{} id: 0x29, type: 'u8',   name: 'subscription_identifiers_available', plural: true
    @{} id: 0x2A, type: 'u8',   name: 'shared_subscription_available', 


  const prop_map = new Map()
  for const prop_obj of prop_entries ::
    prop_map.set(prop_obj.id, prop_obj)
    prop_map.set(prop_obj.name, prop_obj)

  return @{}
    prop_entries
    by_prop_id: prop_map.get.bind(prop_map)

