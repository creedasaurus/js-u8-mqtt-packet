
export const [mqtt_props_by_id, mqtt_props_entries] = @!
  const entries = @[]
    @[] 0x01, 'u8',   'payload_format_indicator'
    @[] 0x02, 'u32',  'message_expiry_interval', 
    @[] 0x03, 'utf8', 'content_type', 
    @[] 0x08, 'utf8', 'response_topic', 
    @[] 0x09, 'bin',  'correlation_data', 
    @[] 0x0B, 'vint', 'subscription_identifier', 
    @[] 0x11, 'u32',  'session_expiry_interval', 
    @[] 0x12, 'utf8', 'assigned_client_identifier', 
    @[] 0x13, 'u16',  'server_keep_alive', 
    @[] 0x15, 'utf8', 'authentication_method', 
    @[] 0x16, 'bin',  'authentication_data', 
    @[] 0x17, 'u8',   'request_problem_information', 
    @[] 0x18, 'u32',  'will_delay_interval', 
    @[] 0x19, 'u8',   'request_response_information', 
    @[] 0x1A, 'utf8', 'response_information', 
    @[] 0x1C, 'utf8', 'server_reference', 
    @[] 0x1F, 'utf8', 'reason_string', 
    @[] 0x21, 'u16',  'receive_maximum', 
    @[] 0x22, 'u16',  'topic_alias_maximum', 
    @[] 0x23, 'u16',  'topic_alias', 
    @[] 0x24, 'u8',   'maximum_qo_s', 
    @[] 0x25, 'u8',   'retain_available', 
    @[] 0x26, 'pair', 'user_properties', true
    @[] 0x27, 'u32',  'maximum_packet_size', 
    @[] 0x28, 'u8',   'wildcard_subscription_available', 
    @[] 0x29, 'u8',   'subscription_identifiers_available', true
    @[] 0x2A, 'u8',   'shared_subscription_available', 


  const prop_map = new Map()
  for const [id, type, name, plural] of entries ::
    const prop_obj = {id, type, name}
    if plural :: prop_obj.plural = plural
    prop_map.set(prop_obj.id, prop_obj)
    prop_map.set(prop_obj.name, prop_obj)

  return @[]
    prop_map.get.bind(prop_map)
    Array.from @ prop_map.values()
