const {pipeline} = require('stream')
const {createServer, connect} = require('net')

import decode_mqtt from './decode_mqtt.jsy'

createServer()
  .on @ 'error', @\ err ::
    console.warn @ 'Error on server:', err

  .on @ 'listening', @::
    console.log @ 'Ready'

  .on @ 'connection', @\ sock_src ::
    console.log @ 'Host Conn', typeof sock_src
    const sock_dst = connect @ 1883, '127.0.0.1', @::
      console.log @ 'MQTT Conn', typeof sock_dst

      const ctx = {}
      pipeline @
        sock_src
        bind_mqtt_xform @ ctx, '==>'
        sock_dst
        bind_mqtt_xform @ ctx, '<--'
        sock_src

        @\ err ::
          sock_dst.end()
          sock_src.end()

          if err ::
            console.warn @ 'Error at end of pipeline:', err

  .listen @
    parseInt @ process.argv.slice(2).pop() || 1884


function bind_mqtt_xform(ctx, label) ::
  return async function * (stream) ::
    let prev = new Uint8Array(0)

    for await const chunk of stream ::
      let tip, u8 = new Uint8Array @
        Buffer.concat @# prev, chunk

      while 0 !== u8.byteLength ::
        [u8, tip] = decode_mqtt(u8, ctx)
        if undefined === tip ::
          prev = u8
          break

        delete tip.u8_body
        console.log @ label, tip

      yield chunk
