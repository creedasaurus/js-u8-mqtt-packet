import {connect as net_connect} from 'net'
export {MQTTClient} from './core.jsy'

export function _mqtt_node_api(mqtt_session) ::
  return @{}
    with_tcp(...args) ::
      if 0 === args.length ::
        args = @[] 1883, '127.0.0.1'

      return this.with_stream @ net_connect(...args)

    with_stream(duplex_stream, passthrough) ::
      const on_mqtt_chunk = this._conn_.set @
        mqtt_session
        u8_pkt => duplex_stream.write(u8_pkt)

      duplex_stream.once @ 'end', this._conn_.reset

      this._msg_loop = passthrough
        ? _aiter_msg_loop(duplex_stream, on_mqtt_chunk)
        : _async_msg_loop(duplex_stream, on_mqtt_chunk)

      return this


async function _async_msg_loop(duplex_stream, on_mqtt_chunk) ::
  for await const chunk of duplex_stream ::
    on_mqtt_chunk @ chunk

async function * _aiter_msg_loop(duplex_stream, on_mqtt_chunk) ::
  for await const chunk of duplex_stream ::
    on_mqtt_chunk @ chunk
    yield chunk

